<html>

<head>
    <title>RestQ Monitor</title>
</head>

<body>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <div style="padding: 20px;background-color: black; margin-bottom: 50px; border-radius: 5px;">        
        <h1 style="color: wheat;">RestQ Monitor</h1>

        <button id="reloadButton" onclick="reload()" style="border-radius: 10px; padding: 20px;background-color: green;">Reload</button>
        <button id="pauseButton" onclick="pause()" style="border-radius: 10px; padding: 20px;background-color: red;">Pause</button>
        
        <h3 id="loadingMessage" style="display: none;">Loading...</h3>
        <h3 id="successMessage" style="display: inline; color: green;"><%= serverStatus %></h3>
        <h3 id="failedMessage" style="display: none; color: red;"></h3>

        <a href="/setting/consumers?token=<%- authToken %>" style="font-size: large; float: right; padding: 20px; color: green;">Consumers Setting</a>
    </div>
    
    <style>
        .chart-container {
            position: relative;
            width: 100%; /* Adjust as needed */
            height: 400px; /* Adjust as needed */
            display: flex;
            flex-direction: column;
            justify-content: start;
            align-items: center;
        }

        .spinner {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin: 10px;
        }
    
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .chart-container {
            height: 400px;  
        }
    </style>
    
    <script>
        var summaryData = <%- JSON.stringify(summaryData) %>;
        var authToken = "<%- authToken %>";

        function fetchConsumerData() {
            for (let index = 0; index < summaryData.length; index++) {
                let consumerData = summaryData[index];

                let chartContainer = document.createElement('div');
                chartContainer.className = 'chart-container'

                let chartTitle = document.createElement('div');
                chartTitle.innerHTML = `'${consumerData.name}' Consumer Summary`
                chartTitle.style.fontWeight = 'bold'
                chartTitle.style.fontSize = '1.2em'
                chartTitle.style.fontFamily = 'Helvetica, Arial, sans-serif'
                chartTitle.style.fill = 'rgb(51, 51, 51)'
                chartTitle.style.color = 'rgb(51, 51, 51)'
                chartTitle.style.display = 'block'
                chartTitle.style.paddingTop = '8px'
                chartContainer.appendChild(chartTitle);

                let consumerSpinner = document.createElement('div');
                consumerSpinner.className = 'spinner';
                chartContainer.appendChild(consumerSpinner);

                document.body.appendChild(chartContainer);

                axios.get('/monitor/consumer-data?name=' + consumerData.name + '&token=' + authToken)
                    .then(response => {
                        consumerData = response.data.result.consumerSummaryData;
                        var consumerStat = response.data.result.consumerStat;
                        consumerSpinner.remove();

                        let chartConfig = {
                            chart: {
                                type: 'column',
                                options3d: {
                                    enabled: true,
                                    alpha: 15,
                                    beta: 15,
                                    depth: 50,
                                    viewDistance: 25
                                }
                            },
                            title: {
                                text: "'" + consumerData.name + "' Consumer Summary. AVG Time (ms): " + consumerStat?.avg_time
                            },
                            xAxis: {
                                categories: consumerData.labels
                            },
                            yAxis: [],
                            series: []
                        };

                        for (let i = 0; i < consumerData.data.length; i++) {
                            let item = consumerData.data[i];
                            chartConfig.yAxis.push({
                                title: {
                                    text: null
                                },
                                labels: {
                                    enabled: false
                                }
                            });
                            item.yAxis = i;
                            chartConfig.series.push(item);
                        }

                        Highcharts.chart(chartContainer, chartConfig);
                    })
                    .catch(error => {
                        consumerSpinner.remove();
                        alert('Failed to load consumer data for ' + consumerData.name + ': ' + error.message);
                    });
            }
        }

        fetchConsumerData();

        var loadingMessage = document.getElementById('loadingMessage');
        var successMessage = document.getElementById('successMessage');
        var failedMessage = document.getElementById('failedMessage');

        function pause() {
            showLoadingMessage();
            fetch('/monitor/pause?token=' + authToken, {
                method: 'POST',
                body: {
                    token: authToken
                }
            })
            .then(async response => {
                showSucessMessage(await response.text());
            })
            .catch(error => {
                showFailedMessage(error.message);
            });
        }

        function reload() {
            showLoadingMessage();
            fetch('/monitor/reload?token=' + authToken, {
                method: 'POST',
                body: {
                    token: authToken
                }
            })
            .then(async response => {
                showSucessMessage(await response.text());
            })
            .catch(error => {
                showFailedMessage(error.message);
            });
        }

        function start() {
            showLoadingMessage();
            fetch('/monitor/start?token=' + authToken, {
                method: 'POST'
            })
            .then(async response => {
                showSucessMessage(await response.text());
            })
            .catch(error => {
                showFailedMessage(error.message);
            });
        }

        function showLoadingMessage() {
            loadingMessage.style.display = 'inline';
            successMessage.style.display = 'none';
            failedMessage.style.display = 'none';
        }
        function showSucessMessage(message) {
            loadingMessage.style.display = 'none';
            successMessage.style.display = 'inline';
            failedMessage.style.display = 'none';
            successMessage.textContent = message;
        }
        function showFailedMessage(message) {
            loadingMessage.style.display = 'none';
            successMessage.style.display = 'none';
            failedMessage.style.display = 'inline';
            failedMessage.textContent = message;
        }
    </script>

</html>