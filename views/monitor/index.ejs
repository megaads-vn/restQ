<html>

<head>
    <title>RestQ Monitor</title>
</head>

<body>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <div style="padding: 20px;background-color: black; margin-bottom: 50px; border-radius: 5px;">        
        <h1 style="color: wheat;">RestQ Monitor</h1>

        <button id="reloadButton" onclick="reload()" style="border-radius: 10px; padding: 20px;background-color: green;">Reload</button>
        <button id="pauseButton" onclick="pause()" style="border-radius: 10px; padding: 20px;background-color: red;">Pause</button>
        
        <h3 id="loadingMessage" style="display: none;">Loading...</h3>
        <h3 id="successMessage" style="display: inline; color: green;"><%= serverStatus %></h3>
        <h3 id="failedMessage" style="display: none; color: red;"></h3>

        <a href="/setting/consumers?token=<%- authToken %>" style="font-size: large; float: right; padding: 20px; color: green;">Consumers Setting</a>
    </div>

    <script>
        var summaryData = <%- JSON.stringify(summaryData) %>;
        var authToken = "<%- authToken %>";
        for (let index = 0; index < summaryData.length; index++) {
            let consumerData = summaryData[index];
            consumerData = axios.get('/monitor/consumer-data?name=' + consumerData.name + '&token=' + authToken)
                .then(response => {
                    consumerData = response.data.result;
                    var chartContainer = document.createElement('div');
                    document.body.appendChild(chartContainer);
                    let chartConfig = {
                        chart: {
                            type: 'column',
                            options3d: {
                                enabled: true,
                                alpha: 15,
                                beta: 15,
                                depth: 50,
                                viewDistance: 25
                            }
                        },
                        title: {
                            text: "'" + consumerData.name + "' Consumer Summary"
                        },
                        xAxis: {
                            categories: consumerData.labels
                        },
                        yAxis: [],
                        series: []
                    }
                    for (let index = 0; index < consumerData.data.length; index++) {
                        let item = consumerData.data[index];                
                        chartConfig.yAxis.push({
                            title: {
                                text: null
                            },
                            labels: {
                                enabled: false
                            }
                        });
                        item.yAxis = index;
                        chartConfig.series.push(item);
                    }
                    Highcharts.chart(chartContainer, chartConfig);
                })
        }

        var loadingMessage = document.getElementById('loadingMessage');
        var successMessage = document.getElementById('successMessage');
        var failedMessage = document.getElementById('failedMessage');

        function pause() {
            showLoadingMessage();
            fetch('/monitor/pause?token=' + authToken, {
                method: 'POST',
                body: {
                    token: authToken
                }
            })
            .then(async response => {
                showSucessMessage(await response.text());
            })
            .catch(error => {
                showFailedMessage(error.message);
            });
        }

        function reload() {
            showLoadingMessage();
            fetch('/monitor/reload?token=' + authToken, {
                method: 'POST',
                body: {
                    token: authToken
                }
            })
            .then(async response => {
                showSucessMessage(await response.text());
            })
            .catch(error => {
                showFailedMessage(error.message);
            });
        }

        function start() {
            showLoadingMessage();
            fetch('/monitor/start?token=' + authToken, {
                method: 'POST'
            })
            .then(async response => {
                showSucessMessage(await response.text());
            })
            .catch(error => {
                showFailedMessage(error.message);
            });
        }

        function showLoadingMessage() {
            loadingMessage.style.display = 'inline';
            successMessage.style.display = 'none';
            failedMessage.style.display = 'none';
        }
        function showSucessMessage(message) {
            loadingMessage.style.display = 'none';
            successMessage.style.display = 'inline';
            failedMessage.style.display = 'none';
            successMessage.textContent = message;
        }
        function showFailedMessage(message) {
            loadingMessage.style.display = 'none';
            successMessage.style.display = 'none';
            failedMessage.style.display = 'inline';
            failedMessage.textContent = message;
        }
    </script>

</html>