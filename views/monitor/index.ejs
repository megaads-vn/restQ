<html>

<head>
    <title>RestQ Monitor</title>
</head>

<body>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <div style="padding: 20px;background-color: black; margin-bottom: 50px; border-radius: 5px;">        
        <h1 style="color: wheat;">RestQ Monitor</h1>

        <button id="reloadButton" onclick="reload()" style="border-radius: 10px; padding: 20px;background-color: green;">Reload</button>
        <button id="pauseButton" onclick="pause()" style="border-radius: 10px; padding: 20px;background-color: red;">Pause</button>
        
        <h3 id="loadingMessage" style="display: none;">Loading...</h3>
        <h3 id="successMessage" style="display: inline; color: green;"><%= serverStatus %></h3>
        <h3 id="failedMessage" style="display: none; color: red;"></h3>

        <a href="/setting/consumers?token=<%- authToken %>" style="font-size: large; float: right; padding: 20px; color: green;">Consumer Config</a>
    </div>
    
    <style>
        .chart-container {
            position: relative;
            width: 100%;
            height: 400px;
            display: flex;
            flex-direction: column;
            justify-content: start;
            align-items: center;
            margin-bottom: 30px;
            border-bottom-style: groove;
        }

        .spinner {
            border: 3px solid #f3f3f3; /* Light grey */
            border-top: 3px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            display: inline-block;
            /* margin: 10px; */
        }
    
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }


        .header-container {
            display: flex;
            justify-content: end;
            align-items: center;
            width: 100%;
            margin-bottom: 10px;
        }

        .chart-content {
            width: 100%;
        }

        .refresh-btn {
            border-radius: 10px;
            padding: 10px;
            background-color: #d9d7d7;
            color: rgb(133, 126, 126);
            margin-left: 10px;
            font-size: 15px;
            border: none;
        }        
        
        .placeholder-text {
            margin-top: 100px;
            font-size: 18px;
            color: #999;
            /* padding: auto; */
            text-align: center;
        }
        
        .consumer-name {
            margin-left: 10px;
            font-size: 15px;
            padding: auto;
            text-align: center;
            font-family: sans-serif;
            font-weight: bold;
        }
    </style>
    
    <script>
        var summaryData = <%- JSON.stringify(summaryData) %>;
        var authToken = "<%- authToken %>";

        function fetchConsumerData() {
            summaryData.forEach(consumer => {
                let chartContainer = document.createElement('div');
                chartContainer.className = 'chart-container';

                // Create header container to hold the title and the button side by side
                let headerContainer = document.createElement('div');
                headerContainer.className = 'header-container';

                // Create button to load consumer data for this chart
                let loadButton = document.createElement('button');
                loadButton.classList.add('refresh-btn');
                loadButton.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh';

                // Append button to header container
                headerContainer.appendChild(loadButton);

                // Append header container to chart container
                chartContainer.appendChild(headerContainer);

                // Append chart container to document body
                document.body.appendChild(chartContainer);
                
                let consumerNameElement = document.createElement('div');
                consumerNameElement.classList.add('consumer-name');
                consumerNameElement.innerHTML = consumer.name;
                chartContainer.appendChild(consumerNameElement);

                // Initial placeholder text for no data loaded
                let placeholderText = document.createElement('div');
                placeholderText.classList.add('placeholder-text');
                placeholderText.innerHTML = "Click refresh button to load data for '" + consumer.name + "'";
                chartContainer.appendChild(placeholderText);

                // Set up click event for the load button
                loadButton.addEventListener('click', function() {
                    // Disable the button immediately to avoid duplicate requests
                    loadButton.disabled = true;
                    
                    // Insert a spinner for visual feedback
                    let consumerSpinner = document.createElement('div');
                    consumerSpinner.className = 'spinner';
                    headerContainer.appendChild(consumerSpinner);

                    axios.get('/monitor/consumer-data?name=' + consumer.name + '&token=' + authToken)
                        .then(response => {
                            let consumerDataResp = response.data.result.consumerSummaryData;
                            let consumerStat = response.data.result.consumerStat;

                            // Remove spinner after data is fetched
                            consumerSpinner.remove();
                            // Remove the placeholder text when data is loaded
                            placeholderText.remove();
                            consumerNameElement.remove();

                            // Prepare Highcharts configuration
                            let chartConfig = {
                                chart: {
                                    type: 'column',
                                    options3d: {
                                        enabled: true,
                                        alpha: 15,
                                        beta: 15,
                                        depth: 50,
                                        viewDistance: 25
                                    }
                                },
                                title: {
                                    text: "'" + consumerDataResp.name + "' Consumer Summary. AVG Time (ms): " + (consumerStat ? consumerStat.avg_time : '')
                                },
                                xAxis: {
                                    categories: consumerDataResp.labels
                                },
                                yAxis: [],
                                series: []
                            };

                            // For each dataset, configure and assign a separate yAxis
                            for (let i = 0; i < consumerDataResp.data.length; i++) {
                                let item = consumerDataResp.data[i];
                                chartConfig.yAxis.push({
                                    title: {
                                        text: null
                                    },
                                    labels: {
                                        enabled: false
                                    }
                                });
                                item.yAxis = i;
                                chartConfig.series.push(item);
                            }

                            // If chart already exists, remove it so updated data is rendered
                            let existingChartDiv = chartContainer.querySelector('.chart-content');
                            if (existingChartDiv) {
                                existingChartDiv.remove();
                            }

                            // Create a container for the chart below the header
                            let chartDiv = document.createElement('div');
                            chartDiv.classList.add('chart-content');
                            chartContainer.appendChild(chartDiv);
                            
                            // Render the chart using Highcharts
                            Highcharts.chart(chartDiv, chartConfig);

                            // Re-enable the button for future reloads
                            loadButton.disabled = false;
                        })
                        .catch(error => {
                            // Remove spinner and re-enable the button in case of error
                            consumerSpinner.remove();
                            alert('Failed to load consumer data for ' + consumer.name + ': ' + error.message);
                            loadButton.disabled = false;
                        });
                });
            });
        }

        fetchConsumerData();

        var loadingMessage = document.getElementById('loadingMessage');
        var successMessage = document.getElementById('successMessage');
        var failedMessage = document.getElementById('failedMessage');

        function pause() {
            showLoadingMessage();
            fetch('/monitor/pause?token=' + authToken, {
                method: 'POST',
                body: {
                    token: authToken
                }
            })
            .then(async response => {
                showSucessMessage(await response.text());
            })
            .catch(error => {
                showFailedMessage(error.message);
            });
        }

        function reload() {
            showLoadingMessage();
            fetch('/monitor/reload?token=' + authToken, {
                method: 'POST',
                body: {
                    token: authToken
                }
            })
            .then(async response => {
                showSucessMessage(await response.text());
            })
            .catch(error => {
                showFailedMessage(error.message);
            });
        }

        function start() {
            showLoadingMessage();
            fetch('/monitor/start?token=' + authToken, {
                method: 'POST'
            })
            .then(async response => {
                showSucessMessage(await response.text());
            })
            .catch(error => {
                showFailedMessage(error.message);
            });
        }

        function showLoadingMessage() {
            loadingMessage.style.display = 'inline';
            successMessage.style.display = 'none';
            failedMessage.style.display = 'none';
        }
        function showSucessMessage(message) {
            loadingMessage.style.display = 'none';
            successMessage.style.display = 'inline';
            failedMessage.style.display = 'none';
            successMessage.textContent = message;
        }
        function showFailedMessage(message) {
            loadingMessage.style.display = 'none';
            successMessage.style.display = 'none';
            failedMessage.style.display = 'inline';
            failedMessage.textContent = message;
        }
    </script>

</html>